#!/usr/bin/env bash

# VPS监控系统主程序

# 设置错误处理
set -e

# 获取脚本所在目录
SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"

# 加载必要的模块
source "${SCRIPT_DIR}/utils/config.sh"
source "${SCRIPT_DIR}/utils/logger.sh"
source "${SCRIPT_DIR}/monitor/cpu.sh"
source "${SCRIPT_DIR}/monitor/memory.sh"
source "${SCRIPT_DIR}/monitor/disk.sh"
source "${SCRIPT_DIR}/monitor/network.sh"
source "${SCRIPT_DIR}/monitor/ssh.sh"
source "${SCRIPT_DIR}/notify/telegram.sh"

# 版本信息
VERSION="1.0.0"

# 显示帮助信息
show_help() {
    cat << EOF
VPS监控系统 v${VERSION}

用法: vpsm [命令] [选项]

命令:
    status      显示系统状态
    start       启动监控服务
    stop        停止监控服务
    restart     重启监控服务
    config      配置系统
    test        测试Telegram通知
    update      检查更新
    logs        查看日志
    help        显示此帮助信息
    version     显示版本信息
    uninstall   卸载程序

选项:
    -h, --help     显示帮助信息
    -v, --version  显示版本信息
    -d, --debug    启用调试模式
EOF
}

# 显示系统状态
show_status() {
    local cpu_usage memory_usage disk_usage
    cpu_usage=$(get_cpu_usage)
    memory_usage=$(get_memory_usage)
    disk_usage=$(get_disk_usage)
    
    cat << EOF
系统状态:
CPU使用率: ${cpu_usage}%
内存使用率: ${memory_usage}%
磁盘使用率: ${disk_usage}%

网络状态:
$(get_network_speed)
$(get_total_traffic)

SSH连接:
当前连接数: $(get_ssh_connections)
EOF
}

# 守护进程模式
run_daemon() {
    log_info "启动监控守护进程"
    
    while true; do
        # 检查系统状态
        check_system_status
        
        # 检查SSH登录
        monitor_ssh_login
        
        # 等待下一次检查
        sleep "${CHECK_INTERVAL:-300}"
    done
}

# 检查系统状态
check_system_status() {
    local alerts=()
    
    # 检查CPU
    if check_cpu_threshold "$CPU_THRESHOLD"; then
        alerts+=("CPU使用率超过阈值: $(get_cpu_usage)%")
    fi
    
    # 检查内存
    if check_memory_threshold "$MEMORY_THRESHOLD"; then
        alerts+=("内存使用率超过阈值: $(get_memory_usage)%")
    fi
    
    # 检查磁盘
    if check_disk_threshold "$DISK_THRESHOLD"; then
        alerts+=("磁盘使用率超过阈值: $(get_disk_usage)%")
    fi
    
    # 发送警告
    if [ ${#alerts[@]} -gt 0 ]; then
        local message="系统状态警告:\n\n"
        for alert in "${alerts[@]}"; do
            message+="• ${alert}\n"
        done
        send_alert "系统状态" "$message"
    fi
}

# 配置系统
configure_system() {
    local key="$1"
    local value="$2"
    
    if [[ -z "$key" ]]; then
        # 显示当前配置
        cat "$CONFIG_FILE"
        return
    fi
    
    update_config "$key" "$value"
    echo "配置已更新"
}

# 主函数
main() {
    local command="$1"
    shift || true
    
    case "$command" in
        status)
            show_status
            ;;
        start)
            systemctl start vps-monitor
            ;;
        stop)
            systemctl stop vps-monitor
            ;;
        restart)
            systemctl restart vps-monitor
            ;;
        config)
            configure_system "$@"
            ;;
        test)
            test_telegram_config
            ;;
        help|-h|--help)
            show_help
            ;;
        version|-v|--version)
            echo "v${VERSION}"
            ;;
        *)
            show_status
            ;;
    esac
}

# 执行主函数
main "$@" 